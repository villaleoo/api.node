¬°Claro! Adem√°s de las funciones b√°sicas para el manejo de rutas y solicitudes HTTP, Express.js ofrece una variedad de funciones √∫tiles que puedes utilizar en tu aplicaci√≥n. Aqu√≠ tienes algunas de ellas:

1. **`app.get(path, callback)`**: Define una ruta para manejar solicitudes HTTP GET. Puedes utilizar esto para enviar una respuesta cuando se accede a una URL espec√≠fica con el m√©todo GET.

2. **`app.post(path, callback)`**: Similar a `app.get()`, pero para manejar solicitudes HTTP POST. √ötil para procesar formularios enviados por los usuarios.

3. **`app.put(path, callback)`** y **`app.delete(path, callback)`**: Estas funciones definen rutas para manejar solicitudes HTTP PUT y DELETE, respectivamente. √ösalas para actualizar o eliminar recursos en tu aplicaci√≥n.

4. **Middleware**:
   - **`app.use(middleware)`**: Agrega middleware a la aplicaci√≥n. El middleware se ejecuta en cada solicitud antes de llegar a las rutas definidas. Puedes usarlo para autenticaci√≥n, manejo de errores, registro, etc.
   - **`app.use(path, middleware)`**: Similar a `app.use()`, pero solo se aplica al subconjunto de rutas especificado por `path`.

5. **Manejo de errores**:
   - **`app.use((err, req, res, next) => { ... })`**: Define middleware para manejar errores. Si un middleware anterior arroja un error, este middleware capturar√° y manejar√° el error.

6. **Redirecciones**:
   - **`res.redirect(status, path)`**: Redirige al cliente a otra URL. Puedes especificar un c√≥digo de estado (por ejemplo, 301 para redirecci√≥n permanente) y la URL de destino.

7. **Renderizaci√≥n de vistas**:
   - **`app.set('view engine', 'ejs')`**: Configura el motor de plantillas (por ejemplo, EJS) para renderizar vistas.
   - **`res.render(view, locals)`**: Renderiza una vista utilizando el motor de plantillas. Puedes pasar datos locales para mostrar en la vista.

8. **Manejo de archivos est√°ticos**:
   - **`app.use(express.static('public'))`**: Sirve archivos est√°ticos (como CSS, im√°genes o archivos JavaScript) desde un directorio llamado "public".

9. **Cookies y sesiones**:
   - **`app.use(express.json())`**: Analiza el cuerpo de las solicitudes como JSON.
   - **`app.use(express.urlencoded({ extended: true }))`**: Analiza el cuerpo de las solicitudes como datos de formulario.
   - **`app.use(express.cookieParser())`**: Analiza las cookies en las solicitudes.
   - **`app.use(express.session())`**: Crea y maneja sesiones de usuario.

10. **Manejo de rutas con par√°metros**:
    - Puedes definir rutas con par√°metros din√°micos utilizando `:nombreParametro` en la ruta. Por ejemplo: `app.get('/usuarios/:id', ...)`. Luego, puedes acceder al valor del par√°metro en el controlador.

Recuerda que Express.js es muy vers√°til, y hay muchas m√°s funciones y middleware disponibles. ¬°Explora la documentaci√≥n oficial para descubrir m√°s opciones y personalizar tu aplicaci√≥n seg√∫n tus necesidades! üòä

¬π: [Express Middleware Documentation](http://expressjs.com/en/guide/using-middleware.html)
¬≥: [Express Basics for Beginners](https://dev.to/ceceliacreates/express-basics-for-beginners-3e00)
‚Å¥: [MDN Web Docs: Express web framework](https://developer.mozilla.org/docs/Learn/Server-side/Express_Nodejs)
‚Åµ: [GeeksforGeeks: Express app.use() Function](https://www.geeksforgeeks.org/express-js-app-use-function/).

Origen: Conversaci√≥n con Bing, 26/3/2024
(1) Using Express middleware. http://expressjs.com/en/guide/using-middleware.html.
(2) Express Basics for Beginners - DEV Community. https://dev.to/ceceliacreates/express-basics-for-beginners-3e00.
(3) Express web framework (Node.js/JavaScript) - Learn web development | MDN. https://developer.mozilla.org/docs/Learn/Server-side/Express_Nodejs.
(4) Express app.use() Function - GeeksforGeeks. https://www.geeksforgeeks.org/express-js-app-use-function/.
(5) What is Express.js? A Comprehensive Guide to All You Need to Know. https://thewebdeveloperguide.com/what-is-expressjs/.
(6) en.wikipedia.org. https://en.wikipedia.org/wiki/Express.js.